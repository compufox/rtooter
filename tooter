#!/usr/bin/env ruby
require 'yaml'
require 'moostodon'
require 'htmlentities'

Keywords = ['vis', 'visibility', 'cw', 'spoiler', 'reply']
KeywordRegex = /(?<key>(#{Keywords.join('|')}):)\s?(?<key_data>(\b((\S|\s)(?!:))+\b))/i
CmdPrefix = '!'
Commands = {}
$client = nil
$current_acct = ''

## add a method to statuses to take out the html 
module Mastodon
  class Status
    Decoder = HTMLEntities.new
    def stripped_content
      Decoder.decode(content
                       .gsub(/(<\/p><p>|<br\s*\/?>)/, "\n")
                       .gsub(/<("[^"]*"|'[^']*'|[^'">])*>/, ''))
    end
  end
end


# quick little helper function to make code kinda clean
def add_command cmd, &block
  Commands[cmd] = block
end

# wraps blocks so they dont fail on http errors
def safe_request
  begin
    yield
  rescue HTTP::TimeoutError
    puts 'ERR -- HTTP Timeout'
  end
end

# loads an account config
def load_account config
  unless File.exists?(config)
    puts 'config not found -- aborting load' unless $client.nil?
    return unless $client.nil?
    
    raise 'config not found'
  end
  
  loaded_config = YAML.load_file(config)
  
  if loaded_config.empty?
    puts 'config file empty -- aborting load' unless $client.nil?
    return unless $client.nil?
  
    raise 'empty config file'
  end
  
  # :blobcatknife:
  raise 'fuck off gabber' if loaded_config[:instance] =~ /gab/
  
  $client = Mastodon::REST::Client.new(base_url: loaded_config[:instance],
                                       bearer_token: loaded_config[:token])
  $current_acct = $client.verify_credentials.acct
  $default_privacy = $client.verify_credentials.attributes["source"]["privacy"]
end

# quits the repl
add_command 'quit' do
  exit true
end

# follws an account after user confirmation
add_command 'follow' do |account|
  acct = $client.search(account).first

  # confirm with user, then follow
end

# fetches a certain number of recent notifications
add_command 'notifs' do |num|
  num = num.to_i
  num = 10 if num.zero?
  safe_request do
    Array($client.notifications)[0..num].each do |notif|
      puts "(#{notif.id}) #{notif.account.acct} -- #{notif.type} #{notif.type.start_with?('follow') ? '' : notif.status.id}"
    end
  end
end

# fetches a single status
add_command 'status' do |id|
  safe_request do
    status = $client.status(id)
    puts "@#{status.account.acct}: #{status.stripped_content}"
  end
end

# switches to a new account
add_command 'account' do |config|
  load_account config
end


load_account(ARGV.pop || 'tooter.conf')


##
# MAIN LOOP
##

loop do
  print "Tooter (@#{$current_acct})> "
  input = gets

  # handles ctrl+d
  Commands['quit'].call if input.nil?
  
  input.strip!
  if input[0] == CmdPrefix
    cmd = input.split.first[1..]
    args = input.split[1..]

    if Commands.has_key? cmd
      Commands[cmd].call *args
    else
      puts "Command not found"
    end
    
  elsif input.length > 0
    opts = {
      visibility: $default_privacy
    }
    
    matches = KeywordRegex.match(input)

    # catch all of our keywords and handle them properly
    until matches.nil? do
      keywords = matches.named_captures
      
      key = keywords["key"]
      key = 'visibility' if key.chop == 'vis' or key.chop == 'visibility'
      key = 'spoiler_text' if key.chop == 'cw' or key.chop == 'spoiler'
      key = 'in_reply_to_id' if key.chop == 'reply'
      
      opts[key.to_sym] = keywords["key_data"].strip

      match_begin = matches.begin("key")
      match_size = keywords['key'].length + keywords['key_data'].length + 1
      
      input[match_begin...match_begin + match_size] = ''
      matches = KeywordRegex.match(input)
    end

    safe_request do
      # outputs our new status id
      puts "status #{$client.create_status(input.strip, opts).id} posted"
    end
  end
end
